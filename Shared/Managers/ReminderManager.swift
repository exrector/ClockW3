import Foundation
import Combine
import UserNotifications
#if canImport(ActivityKit) && !os(macOS)
import ActivityKit
#endif

// MARK: - Live Activity Preferences
private struct LiveActivityPreferences: Codable {
    var liveActivityEnabled: Bool
    var alwaysLiveActivity: Bool

    init(liveActivityEnabled: Bool = false, alwaysLiveActivity: Bool = false) {
        self.liveActivityEnabled = liveActivityEnabled
        self.alwaysLiveActivity = alwaysLiveActivity
    }
}

// MARK: - Reminder Manager
/// –£–ø—Ä–∞–≤–ª—è–µ—Ç –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º —Ü–∏—Ñ–µ—Ä–±–ª–∞—Ç–∞
@MainActor
class ReminderManager: ObservableObject {
    static let shared = ReminderManager()

    @Published var currentReminder: ClockReminder?
    @Published var previewReminder: ClockReminder?  // –í—Ä–µ–º–µ–Ω–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ (–Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è)

    private let userDefaults = SharedUserDefaults.shared
    private let reminderKey = "clock_reminder"
    private let notificationIdentifier = "clock_reminder_notification"
    private let liveActivityPreferencesKey = "live_activity_preferences"
    private var updateTimer: Timer?

    private init() {
        loadReminder()
        // –°–æ–∑–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π preview –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –µ—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ
        if currentReminder == nil {
            createDefaultPreview()
        }
#if canImport(ActivityKit) && !os(macOS)
        reconcileLiveActivityOnLaunch()
        startLiveActivityUpdateTimer()
#endif
    }
    
    private func createDefaultPreview() {
        let calendar = Calendar.current
        let now = Date()
        let currentHour = calendar.component(.hour, from: now)
        let currentMinute = calendar.component(.minute, from: now)

        // –û–∫—Ä—É–≥–ª—è–µ–º –í–í–ï–†–• –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∫—Ä–∞—Ç–Ω–æ–º—É 15 –º–∏–Ω—É—Ç–∞–º
        let roundedMinute = ((currentMinute / 15) + 1) * 15

        var hour = currentHour
        var minute = roundedMinute

        // –ï—Å–ª–∏ –º–∏–Ω—É—Ç—ã >= 60, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —á–∞—Å
        if minute >= 60 {
            minute = 0
            hour = (hour + 1) % 24
        }

        // –°–æ–∑–¥–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –¥–∞—Ç—É –¥–ª—è one-time –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        let nextDate = ClockReminder.nextTriggerDate(hour: hour, minute: minute, from: now)

        // Preview —Å–æ–∑–¥–∞—ë—Ç—Å—è –ë–ï–ó –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π - –æ–Ω–∏ –ø—Ä–∏–º–µ–Ω—è—Ç—Å—è –ø—Ä–∏ confirmPreview() –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        previewReminder = ClockReminder(hour: hour, minute: minute, date: nextDate)
    }

    // MARK: - Storage

    private func loadReminder() {
        guard let data = userDefaults.data(forKey: reminderKey),
              let reminder = try? JSONDecoder().decode(ClockReminder.self, from: data) else {
            currentReminder = nil
            return
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –∏—Å—Ç–µ–∫–ª–æ –ª–∏ one-time –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        if let reminderDate = reminder.date, reminderDate < Date() {
            // –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏—Å—Ç–µ–∫–ª–æ, —É–¥–∞–ª—è–µ–º
            currentReminder = nil
            userDefaults.removeObject(forKey: reminderKey)
            return
        }
        
        currentReminder = reminder
    }

    private func saveReminder() {
        if let reminder = currentReminder,
           let data = try? JSONEncoder().encode(reminder) {
            userDefaults.set(data, forKey: reminderKey)
        } else {
            userDefaults.removeObject(forKey: reminderKey)
        }
    }

    private func saveLiveActivityPreferences(from reminder: ClockReminder) {
        let preferences = LiveActivityPreferences(
            liveActivityEnabled: reminder.liveActivityEnabled,
            alwaysLiveActivity: reminder.alwaysLiveActivity
        )
        if let data = try? JSONEncoder().encode(preferences) {
            userDefaults.set(data, forKey: liveActivityPreferencesKey)
            userDefaults.synchronize()
            print("üíæ Saved Live Activity preferences: liveActivityEnabled=\(preferences.liveActivityEnabled), alwaysLiveActivity=\(preferences.alwaysLiveActivity)")
        }
    }

    private func loadLiveActivityPreferences() -> LiveActivityPreferences {
        guard let data = userDefaults.data(forKey: liveActivityPreferencesKey),
              let preferences = try? JSONDecoder().decode(LiveActivityPreferences.self, from: data) else {
            print("üìÇ No saved Live Activity preferences, using defaults")
            return LiveActivityPreferences()
        }
        print("üìÇ Loaded Live Activity preferences: liveActivityEnabled=\(preferences.liveActivityEnabled), alwaysLiveActivity=\(preferences.alwaysLiveActivity)")
        return preferences
    }

    // MARK: - Notification Permissions

    /// –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    func requestPermission() async -> Bool {
        do {
            #if os(iOS)
            // Time Sensitive is controlled by entitlement, not by authorization options.
            let granted = try await UNUserNotificationCenter.current().requestAuthorization(options: [.alert, .sound, .badge])
            #else
            let granted = try await UNUserNotificationCenter.current().requestAuthorization(options: [.alert, .sound, .badge])
            #endif
            return granted
        } catch {
            return false
        }
    }

    // MARK: - Preview Management

    /// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ (–¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞)
    func setPreviewReminder(_ reminder: ClockReminder) {
        previewReminder = reminder
    }

    /// –û—á–∏—â–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    func clearPreviewReminder() {
        previewReminder = nil
        // –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, —Å—Ä–∞–∑—É —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π preview
        if currentReminder == nil {
            createDefaultPreview()
        }
    }

    /// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç preview –∏ —Å–æ–∑–¥–∞—ë—Ç —Ä–µ–∞–ª—å–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    func confirmPreview() async {
        guard let preview = previewReminder else { return }

        // –í–°–ï–ì–î–ê –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è (–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∫–ª—é—á–∞–ª –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç—å)
        let preferences = loadLiveActivityPreferences()

        // –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç—å –≤ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö - –ø—Ä–∏–º–µ–Ω—è–µ–º –µ—ë
        let finalReminder = ClockReminder(
            id: preview.id,
            hour: preview.hour,
            minute: preview.minute,
            date: preview.date,
            isEnabled: preview.isEnabled,
            liveActivityEnabled: preferences.liveActivityEnabled,
            alwaysLiveActivity: preferences.alwaysLiveActivity,
            isTimeSensitive: preview.isTimeSensitive
        )

        if preferences.alwaysLiveActivity {
            print("‚úÖ Confirming preview with saved preferences (always-on mode): liveActivityEnabled=\(preferences.liveActivityEnabled)")
        } else {
            print("‚úÖ Confirming preview without preferences (normal mode)")
        }

        await setReminder(finalReminder)
        clearPreviewReminder()
    }

    // MARK: - Reminder Management

    /// –°–æ–∑–¥–∞—ë—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    func setReminder(_ reminder: ClockReminder) async {
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        UNUserNotificationCenter.current().removePendingNotificationRequests(withIdentifiers: [notificationIdentifier])

        currentReminder = reminder
        saveReminder()

        // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
        if reminder.isEnabled {
            await scheduleNotification(for: reminder)
        }

        await updateLiveActivityIntegration(for: reminder)
    }

    /// –û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Ä–µ–º—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    func updateReminderTime(hour: Int, minute: Int) async {
        guard var reminder = currentReminder else { return }

        // –ï—Å–ª–∏ —ç—Ç–æ one-time –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞—Ç—É
        let updatedDate = reminder.date != nil
            ? ClockReminder.nextTriggerDate(hour: hour, minute: minute, from: Date())
            : nil

        reminder = ClockReminder(
            id: reminder.id,
            hour: hour,
            minute: minute,
            date: updatedDate,
            isEnabled: reminder.isEnabled,
            liveActivityEnabled: reminder.liveActivityEnabled,
            alwaysLiveActivity: reminder.alwaysLiveActivity,
            isTimeSensitive: reminder.isTimeSensitive
        )
        await setReminder(reminder)
    }

    /// –û–±–Ω–æ–≤–ª—è–µ—Ç —Ä–µ–∂–∏–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è: –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –∏–ª–∏ –æ–¥–∏–Ω —Ä–∞–∑
    func updateReminderRepeat(isDaily: Bool, referenceDate: Date = Date()) async {
        guard var reminder = currentReminder else { return }
        guard reminder.isDaily != isDaily else { return }

        let nextDate = isDaily
            ? nil
            : ClockReminder.nextTriggerDate(hour: reminder.hour, minute: reminder.minute, from: referenceDate)

        reminder = ClockReminder(
            id: reminder.id,
            hour: reminder.hour,
            minute: reminder.minute,
            date: nextDate,
            isEnabled: reminder.isEnabled,
            liveActivityEnabled: reminder.liveActivityEnabled,
            alwaysLiveActivity: reminder.alwaysLiveActivity,
            isTimeSensitive: reminder.isTimeSensitive
        )
        await setReminder(reminder)
    }

    /// –£–¥–∞–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    func deleteReminder() {
        let reminderID = currentReminder?.id
        // –ù–ï —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ - –æ–Ω–∏ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ alwaysLiveActivity
        if let reminder = currentReminder {
            print("üóëÔ∏è Deleting reminder: liveActivityEnabled=\(reminder.liveActivityEnabled), alwaysLiveActivity=\(reminder.alwaysLiveActivity)")
        } else {
            print("üóëÔ∏è Deleting reminder, but currentReminder is nil")
        }
        UNUserNotificationCenter.current().removePendingNotificationRequests(withIdentifiers: [notificationIdentifier])
        currentReminder = nil
        saveReminder()
        // –°—Ä–∞–∑—É —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π preview
        print("‚ú® Creating new preview after deletion")
        createDefaultPreview()

#if canImport(ActivityKit) && !os(macOS)
        if let reminderID, #available(iOS 16.1, *) {
            Task {
                await self.endLiveActivity(reminderID: reminderID)
            }
        }
#endif
    }

    // MARK: - Notification Scheduling

    private func scheduleNotification(for reminder: ClockReminder) async {
        let content = UNMutableNotificationContent()
        content.title = "THE M.O.W TIME"
        content.body = "Check the world time \(reminder.formattedTime)"

        #if os(iOS)
        if reminder.isTimeSensitive {
            // Time-Sensitive alert —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –≥—Ä–æ–º–∫–æ—Å—Ç—å—é
            content.sound = UNNotificationSound.defaultCriticalSound(withAudioVolume: 1.0)
            content.interruptionLevel = .timeSensitive
        } else {
            content.sound = .default
        }
        #else
        content.sound = .default
        #endif

        content.categoryIdentifier = "CLOCK_REMINDER"

        let trigger: UNNotificationTrigger

        if let targetDate = reminder.date {
            // –û–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É
            let calendar = Calendar.current
            var dateComponents = calendar.dateComponents([.year, .month, .day], from: targetDate)
            dateComponents.hour = reminder.hour
            dateComponents.minute = reminder.minute

            trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents, repeats: false)
        } else {
            // –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–µ—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            var dateComponents = DateComponents()
            dateComponents.hour = reminder.hour
            dateComponents.minute = reminder.minute

            trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents, repeats: true)
        }

        let request = UNNotificationRequest(
            identifier: notificationIdentifier,
            content: content,
            trigger: trigger
        )

        do {
            try await UNUserNotificationCenter.current().add(request)
            if reminder.date != nil {
            } else {
            }
        } catch {
        }
    }

    /// –û–±–Ω–æ–≤–ª—è–µ—Ç —Ñ–ª–∞–≥ Live Activity
    func updateLiveActivityEnabled(isEnabled: Bool) async {
        guard var reminder = currentReminder else { return }
        guard reminder.liveActivityEnabled != isEnabled else { return }
        reminder.liveActivityEnabled = isEnabled
        await setReminder(reminder)
    }

    /// –û–±–Ω–æ–≤–ª—è–µ—Ç —Ñ–ª–∞–≥ Time-Sensitive Alert
    func updateTimeSensitiveEnabled(isEnabled: Bool) async {
        guard var reminder = currentReminder else { return }
        guard reminder.isTimeSensitive != isEnabled else { return }
        reminder.isTimeSensitive = isEnabled
        await setReminder(reminder)
    }

    /// –û–±–Ω–æ–≤–ª—è–µ—Ç —Ñ–ª–∞–≥ Always Live Activity
    func updateAlwaysLiveActivity(isEnabled: Bool) async {
        guard var reminder = currentReminder else { return }
        guard reminder.alwaysLiveActivity != isEnabled else { return }
        reminder.alwaysLiveActivity = isEnabled

        if isEnabled {
            // –í–ö–õ–Æ–ß–ï–ù–ò–ï: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ù–ê–í–°–ï–ì–î–ê
            reminder.liveActivityEnabled = true
            saveLiveActivityPreferences(from: ClockReminder(
                id: reminder.id,
                hour: reminder.hour,
                minute: reminder.minute,
                date: reminder.date,
                isEnabled: reminder.isEnabled,
                liveActivityEnabled: true,
                alwaysLiveActivity: true,
                isTimeSensitive: reminder.isTimeSensitive
            ))
            print("üîí Always-on mode ENABLED - preferences saved forever")
        } else {
            // –í–´–ö–õ–Æ–ß–ï–ù–ò–ï: –æ—á–∏—â–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
            saveLiveActivityPreferences(from: ClockReminder(
                id: reminder.id,
                hour: reminder.hour,
                minute: reminder.minute,
                date: reminder.date,
                isEnabled: reminder.isEnabled,
                liveActivityEnabled: false,
                alwaysLiveActivity: false,
                isTimeSensitive: reminder.isTimeSensitive
            ))
            print("üîì Always-on mode DISABLED - preferences cleared")
        }

        await setReminder(reminder)
    }

    private func updateLiveActivityIntegration(for reminder: ClockReminder) async {
#if canImport(ActivityKit) && !os(macOS)
        if #available(iOS 16.1, *) {
            await updateLiveActivity(for: reminder)
        }
#endif
    }

#if canImport(ActivityKit) && !os(macOS)
    @available(iOS 16.1, *)
    private func reconcileLiveActivityOnLaunch() {
        Task { [weak self] in
            guard let self else { return }
            if let reminder = self.currentReminder {
                await self.updateLiveActivity(for: reminder)
            } else {
                await self.terminateOrphanedActivities()
            }
        }
    }

    @available(iOS 16.1, *)
    private func startLiveActivityUpdateTimer() {
        // –û–±–Ω–æ–≤–ª—è–µ–º Live Activity –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
        updateTimer = Timer.scheduledTimer(withTimeInterval: 10, repeats: true) { [weak self] _ in
            Task { @MainActor [weak self] in
                guard let self, let reminder = self.currentReminder else { return }
                await self.updateLiveActivity(for: reminder)
            }
        }
    }

    @available(iOS 16.1, *)
    private func terminateOrphanedActivities() async {
        let activities = Activity<ReminderLiveActivityAttributes>.activities
        for activity in activities {
            if #available(iOS 16.2, *) {
                let content = ActivityContent(state: activity.content.state, staleDate: nil)
                await activity.end(content, dismissalPolicy: .immediate)
            } else {
                await activity.end(dismissalPolicy: .immediate)
            }
        }
    }

    @available(iOS 16.1, *)
    private func updateLiveActivity(for reminder: ClockReminder) async {
        guard reminder.liveActivityEnabled, reminder.isEnabled else {
            print("‚è∏Ô∏è Live Activity disabled or reminder disabled")
            await endLiveActivity(reminderID: reminder.id)
            return
        }

        // Live Activity —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (–µ—Å–ª–∏ –Ω–µ –≤–∫–ª—é—á–µ–Ω always-on —Ä–µ–∂–∏–º)
        guard !reminder.isDaily || reminder.alwaysLiveActivity else {
            print("‚è∏Ô∏è Daily reminder without always-on mode")
            await endLiveActivity(reminderID: reminder.id)
            return
        }

        if #available(iOS 16.2, *) {
            guard ActivityAuthorizationInfo().areActivitiesEnabled else {
                print("‚è∏Ô∏è Live Activities not authorized")
                return
            }
        }

        let scheduledDate = reminder.nextScheduledDate()
        let now = Date()
        let hasTriggered = scheduledDate <= now

        print("üîÑ updateLiveActivity: scheduledDate=\(scheduledDate), now=\(now), hasTriggered=\(hasTriggered)")

        let contentState = ReminderLiveActivityAttributes.ContentState(
            scheduledDate: scheduledDate,
            hasTriggered: hasTriggered
        )

        // –ï—Å–ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ, –∑–∞–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã
        // –ò–Ω–∞—á–µ staleDate –Ω–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
        let staleDate = hasTriggered ? now.addingTimeInterval(120) : nil

        if let existing = Activity<ReminderLiveActivityAttributes>.activities.first(where: { $0.attributes.reminderID == reminder.id }) {
            print("üìù Updating existing Live Activity with hasTriggered=\(hasTriggered)")
            if #available(iOS 16.2, *) {
                let content = ActivityContent(state: contentState, staleDate: staleDate)
                await existing.update(content)
                print("‚úÖ Live Activity updated successfully")
            } else {
                await existing.update(using: contentState)
                print("‚úÖ Live Activity updated successfully (iOS 16.1)")
            }

            // –ï—Å–ª–∏ —Å—Ä–∞–±–æ—Ç–∞–ª–æ, —É–¥–∞–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã
            if hasTriggered {
                print("‚è≥ Scheduling reminder deletion in 2 minutes")
                Task {
                    try? await Task.sleep(nanoseconds: 120_000_000_000) // 2 –º–∏–Ω—É—Ç—ã
                    await MainActor.run {
                        print("üóëÔ∏è Deleting triggered reminder")
                        self.deleteReminder()
                    }
                }
            }
        } else {
            // –ù–µ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é Live Activity –µ—Å–ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–∂–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ
            guard !hasTriggered else {
                print("‚ùå Not creating Live Activity - already triggered")
                return
            }

            print("üÜï Creating NEW Live Activity for reminder")
            let attributes = ReminderLiveActivityAttributes(reminderID: reminder.id, title: "THE M.O.W TIME")
            if #available(iOS 16.2, *) {
                let content = ActivityContent(state: contentState, staleDate: staleDate)
                let result = try? Activity<ReminderLiveActivityAttributes>.request(
                    attributes: attributes,
                    content: content,
                    pushType: nil
                )
                if result != nil {
                    print("‚úÖ Live Activity created successfully")
                } else {
                    print("‚ùå Failed to create Live Activity")
                }
            } else {
                let result = try? Activity<ReminderLiveActivityAttributes>.request(
                    attributes: attributes,
                    contentState: contentState,
                    pushType: nil
                )
                if result != nil {
                    print("‚úÖ Live Activity created successfully (iOS 16.1)")
                } else {
                    print("‚ùå Failed to create Live Activity (iOS 16.1)")
                }
            }
        }
    }

    @available(iOS 16.1, *)
    private func endLiveActivity(reminderID: UUID) async {
        guard let activity = Activity<ReminderLiveActivityAttributes>.activities.first(where: { $0.attributes.reminderID == reminderID }) else {
            return
        }
        if #available(iOS 16.2, *) {
            let content = ActivityContent(state: activity.content.state, staleDate: nil)
            await activity.end(content, dismissalPolicy: .immediate)
        } else {
            await activity.end(dismissalPolicy: .immediate)
        }
    }

    // –ü—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Live Activity (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ AppDelegate –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏)
    @available(iOS 16.1, *)
    func forceUpdateLiveActivity(for reminder: ClockReminder) async {
        print("üí• Force updating Live Activity")
        await updateLiveActivity(for: reminder)
    }
#endif
}
