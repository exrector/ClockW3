import Foundation
import Combine
import UserNotifications
#if canImport(ActivityKit) && !os(macOS)
import ActivityKit
#endif

// MARK: - Live Activity Preferences
private struct LiveActivityPreferences: Codable {
    var liveActivityEnabled: Bool
    var isTimeSensitive: Bool

    init(
        liveActivityEnabled: Bool = false,
        isTimeSensitive: Bool = false
    ) {
        self.liveActivityEnabled = liveActivityEnabled
        self.isTimeSensitive = isTimeSensitive
    }
}

// MARK: - Reminder Manager
/// –£–ø—Ä–∞–≤–ª—è–µ—Ç –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º —Ü–∏—Ñ–µ—Ä–±–ª–∞—Ç–∞
@MainActor
class ReminderManager: ObservableObject {
    static let shared = ReminderManager()

    @Published var currentReminder: ClockReminder?

    // –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    @Published var temporaryHour: Int?
    @Published var temporaryMinute: Int?
    @Published var temporaryDate: Date?

    // MARK: City selection for Live Activity
    @Published var selectedCityIdentifier: String?
    @Published var selectedCityName: String?
    @Published var isCityTapEnabled: Bool = false

    // Preview-only toggles set from temporary reminder row (before confirmation)
    private var previewLiveActivityEnabled: Bool = false
    private var previewTimeSensitiveEnabled: Bool = false

    private let userDefaults = SharedUserDefaults.shared
    private let reminderKey = "clock_reminder"
    private let notificationIdentifier = "clock_reminder_notification"
    private let liveActivityPreferencesKey = "live_activity_preferences"
    private var updateTimer: Timer?
#if canImport(ActivityKit) && !os(macOS)
#endif

    private init() {
        loadReminder()
        // –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, —Å–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if currentReminder == nil {
            setDefaultTemporaryTime()
        }
#if canImport(ActivityKit) && !os(macOS)
        reconcileLiveActivityOnLaunch()
        startLiveActivityUpdateTimer()
#endif
        reevaluateCityTapEnabled()
    }
    
    private func setDefaultTemporaryTime() {
        let calendar = Calendar.current
        let now = Date()
        let currentHour = calendar.component(.hour, from: now)
        let currentMinute = calendar.component(.minute, from: now)

        // –û–∫—Ä—É–≥–ª—è–µ–º –í–í–ï–†–• –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∫—Ä–∞—Ç–Ω–æ–º—É 15 –º–∏–Ω—É—Ç–∞–º
        let roundedMinute = ((currentMinute / 15) + 1) * 15

        var hour = currentHour
        var minute = roundedMinute

        // –ï—Å–ª–∏ –º–∏–Ω—É—Ç—ã >= 60, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —á–∞—Å
        if minute >= 60 {
            minute = 0
            hour = (hour + 1) % 24
        }

        temporaryHour = hour
        temporaryMinute = minute

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–∞ —Å–µ–≥–æ–¥–Ω—è/–∑–∞–≤—Ç—Ä–∞
        temporaryDate = ClockReminder.nextTriggerDate(hour: hour, minute: minute, from: now)

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–µ–≤—å—é-–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π (–æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Ü–∏–∫–ª–∞ –ø—Ä–µ–≤—å—é)
        let prefs = loadLiveActivityPreferences()
        previewLiveActivityEnabled = prefs.liveActivityEnabled
        previewTimeSensitiveEnabled = prefs.isTimeSensitive
    }

    /// –û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è (–ø–æ–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ)
    func updateTemporaryTime(hour: Int, minute: Int, date: Date? = nil) {
        temporaryHour = hour
        temporaryMinute = minute
        if let date = date {
            temporaryDate = date
        } else if let currentDate = temporaryDate {
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –≤ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–µ
            let calendar = Calendar.current
            var components = calendar.dateComponents([.year, .month, .day], from: currentDate)
            components.hour = hour
            components.minute = minute
            components.second = 0
            temporaryDate = calendar.date(from: components) ?? ClockReminder.nextTriggerDate(hour: hour, minute: minute, from: Date())
        } else {
            // –ï—Å–ª–∏ –¥–∞—Ç–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, –≤—ã—á–∏—Å–ª—è–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            temporaryDate = ClockReminder.nextTriggerDate(hour: hour, minute: minute, from: Date())
        }

        // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: –µ—Å–ª–∏ –¥–∞—Ç–∞ –¥–∞–ª—å—à–µ —á–µ–º 24 —á–∞—Å–∞ ‚Äî –æ—Ç–∫–ª—é—á–∞–µ–º Live Activity –≤ –ø—Ä–µ–≤—å—é
        if let tDate = temporaryDate, tDate.timeIntervalSince(Date()) > 24*60*60 {
            previewLiveActivityEnabled = false
            persistPreviewPreferences()
        }
    }

    /// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    func confirmTemporaryReminder() async {
        guard let hour = temporaryHour, let minute = temporaryMinute else { return }

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –∏–ª–∏ –≤—ã—á–∏—Å–ª—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        let nextDate = temporaryDate ?? ClockReminder.nextTriggerDate(hour: hour, minute: minute, from: Date())

        // –ü—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞–ø—É—Å–∫–∞–µ–º Live Activity —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ –≤ –ø—Ä–µ–≤—å—é –∏ –¥–∞—Ç–∞ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 24 —á–∞—Å–æ–≤
        let autoEnableLA = previewLiveActivityEnabled && (nextDate.timeIntervalSince(Date()) <= 24*60*60)

        // –°–æ–∑–¥–∞—ë–º —Ä–µ–∞–ª—å–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        let newReminder = ClockReminder(
            id: UUID(),
            hour: hour,
            minute: minute,
            date: nextDate,
            isEnabled: true,
            liveActivityEnabled: autoEnableLA,
            // –ü–µ—Ä–µ–Ω–æ—Å–∏–º –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —Ñ–ª–∞–≥–∏ –∏–∑ –ø—Ä–µ–≤—å—é –≤ —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–æ–∑–¥–∞–Ω–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            alwaysLiveActivity: false,
            isTimeSensitive: previewTimeSensitiveEnabled,
            preserveExactMinute: true
        )

        await setReminder(newReminder)

        // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è
        temporaryHour = nil
        temporaryMinute = nil
        temporaryDate = nil
        // –ù–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é-–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ö –∫–∞–∫ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        persistPreviewPreferences()
    }

    // MARK: - Storage

    private func loadReminder() {
        guard let data = userDefaults.data(forKey: reminderKey),
              let reminder = try? JSONDecoder().decode(ClockReminder.self, from: data) else {
            currentReminder = nil
            return
        }
        
        // –ï—Å–ª–∏ —ç—Ç–æ one-time –∏ –µ–≥–æ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ
        if let reminderDate = reminder.date, reminderDate < Date() {
            if reminder.liveActivityEnabled {
                // –° LA ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ –æ–∫–Ω–æ DONE (–¥–æ 2 –º–∏–Ω—É—Ç), —á—Ç–æ–±—ã LA –º–æ–≥–ª–∞ –ø–æ–∫–∞–∑–∞—Ç—å DONE
                let elapsed = Date().timeIntervalSince(reminderDate)
                if elapsed > 120 {
                    currentReminder = nil
                    userDefaults.removeObject(forKey: reminderKey)
                    return
                } else {
                    currentReminder = reminder
                    return
                }
            } else {
                // –ë–µ–∑ LA ‚Äî —É–¥–∞–ª—è–µ–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
                currentReminder = nil
                userDefaults.removeObject(forKey: reminderKey)
                return
            }
        }
        
        currentReminder = reminder
    }

    private func saveReminder() {
        if let reminder = currentReminder,
           let data = try? JSONEncoder().encode(reminder) {
            userDefaults.set(data, forKey: reminderKey)
        } else {
            userDefaults.removeObject(forKey: reminderKey)
        }
    }

    private func saveLiveActivityPreferences(from reminder: ClockReminder) {
        let preferences = LiveActivityPreferences(
            liveActivityEnabled: reminder.liveActivityEnabled,
            isTimeSensitive: reminder.isTimeSensitive
        )
        if let data = try? JSONEncoder().encode(preferences) {
            userDefaults.set(data, forKey: liveActivityPreferencesKey)
            userDefaults.synchronize()
            print("üíæ Saved Live Activity preferences: liveActivityEnabled=\(preferences.liveActivityEnabled), timeSensitive=\(preferences.isTimeSensitive)")
        }
    }

    private func loadLiveActivityPreferences() -> LiveActivityPreferences {
        guard let data = userDefaults.data(forKey: liveActivityPreferencesKey),
              let preferences = try? JSONDecoder().decode(LiveActivityPreferences.self, from: data) else {
            print("üìÇ No saved Live Activity preferences, using defaults")
            return LiveActivityPreferences()
        }
        print("üìÇ Loaded Live Activity preferences: liveActivityEnabled=\(preferences.liveActivityEnabled), timeSensitive=\(preferences.isTimeSensitive)")
        return preferences
    }

    // MARK: - Notification Permissions

    /// –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    func requestPermission() async -> Bool {
        do {
            #if os(iOS)
            // Time Sensitive is controlled by entitlement, not by authorization options.
            let granted = try await UNUserNotificationCenter.current().requestAuthorization(options: [.alert, .sound, .badge])
            #else
            let granted = try await UNUserNotificationCenter.current().requestAuthorization(options: [.alert, .sound, .badge])
            #endif
            return granted
        } catch {
            return false
        }
    }


    // MARK: - Reminder Management

    /// –°–æ–∑–¥–∞—ë—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    func setReminder(_ reminder: ClockReminder) async {
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        UNUserNotificationCenter.current().removePendingNotificationRequests(withIdentifiers: [notificationIdentifier])

        // –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤ –¥–ª—è Live Activity —É one-time
        var adjusted = reminder
        if let d = adjusted.date, d.timeIntervalSince(Date()) > 24*60*60 {
            adjusted.liveActivityEnabled = false
        }

        currentReminder = adjusted
        saveReminder()

        // –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è Live Activity –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞ ‚Äî –æ—á–∏—â–∞–µ–º –≤—ã–±–æ—Ä
        reevaluateCityTapEnabled()

        // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
        if adjusted.isEnabled {
            await scheduleNotification(for: adjusted)
        }

        await updateLiveActivityIntegration(for: adjusted)
    }

    /// –û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Ä–µ–º—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    func updateReminderTime(hour: Int, minute: Int) async {
        guard var reminder = currentReminder else { return }

#if canImport(ActivityKit) && !os(macOS)
        // –õ—é–±–æ–µ —Ä—É—á–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ ‚Äî –∑–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â—É—é LA (–µ—Å–ª–∏ –±—ã–ª–∞), —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —á–∏—Å—Ç—ã–π —Ü–∏–∫–ª
        if #available(iOS 16.1, *) {
            await endLiveActivity(reminderID: reminder.id)
        }
#endif

        // –ï—Å–ª–∏ —ç—Ç–æ one-time –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞—Ç—É
        let updatedDate = reminder.date != nil
            ? ClockReminder.nextTriggerDate(hour: hour, minute: minute, from: Date())
            : nil

        reminder = ClockReminder(
            id: reminder.id,
            hour: hour,
            minute: minute,
            date: updatedDate,
            isEnabled: reminder.isEnabled,
            liveActivityEnabled: reminder.liveActivityEnabled,
            isTimeSensitive: reminder.isTimeSensitive,
            preserveExactMinute: true
        )
        await setReminder(reminder)
    }

    /// –û–±–Ω–æ–≤–ª—è–µ—Ç —Ä–µ–∂–∏–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è: –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –∏–ª–∏ –æ–¥–∏–Ω —Ä–∞–∑
    func updateReminderRepeat(isDaily: Bool, referenceDate: Date = Date()) async {
        guard var reminder = currentReminder else { return }
        guard reminder.isDaily != isDaily else { return }

#if canImport(ActivityKit) && !os(macOS)
        if #available(iOS 16.1, *) {
            await endLiveActivity(reminderID: reminder.id)
        }
#endif

        let nextDate = isDaily
            ? nil
            : ClockReminder.nextTriggerDate(hour: reminder.hour, minute: reminder.minute, from: referenceDate)

        // –ï—Å–ª–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ daily ‚Äî Live Activity –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–∞–µ–º (–æ–Ω–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è daily)
        let newLiveActivityEnabled = isDaily ? false : reminder.liveActivityEnabled

        reminder = ClockReminder(
            id: reminder.id,
            hour: reminder.hour,
            minute: reminder.minute,
            date: nextDate,
            isEnabled: reminder.isEnabled,
            liveActivityEnabled: newLiveActivityEnabled,
            isTimeSensitive: reminder.isTimeSensitive,
            preserveExactMinute: true
        )
        await setReminder(reminder)
    }

    /// –£–¥–∞–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    /// - Parameter endLiveActivity: –∑–∞–≤–µ—Ä—à–∏—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—É—é Live Activity –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é true).
    func deleteReminder(endLiveActivity: Bool = true) {
        let reminderID = currentReminder?.id
#if canImport(ActivityKit) && !os(macOS)
#endif
        UNUserNotificationCenter.current().removePendingNotificationRequests(withIdentifiers: [notificationIdentifier])
        currentReminder = nil
        saveReminder()
        // –°–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        print("‚ú® Creating temporary time after deletion")
        setDefaultTemporaryTime()
        clearSelectedCity()
        reevaluateCityTapEnabled()

#if canImport(ActivityKit) && !os(macOS)
        if endLiveActivity, let reminderID, #available(iOS 16.1, *) {
            Task { await self.endLiveActivity(reminderID: reminderID) }
        }
#endif
    }

    /// –£–¥–∞–ª—è–µ—Ç —Å—Ä–∞–±–æ—Ç–∞–≤—à–µ–µ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ—Å–ª–µ –æ–∫–Ω–∞ DONE
    private func cleanupExpiredReminderIfNeeded(now: Date = Date()) {
        guard let reminder = currentReminder,
              let reminderDate = reminder.date else {
            return
        }

        if now >= reminderDate {
            print("üóëÔ∏è Auto-removing one-time reminder at trigger time")
            deleteReminder()
        }
    }

    /// –ü—É–±–ª–∏—á–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞: –µ—Å–ª–∏ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–∂–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ –∏ LA –æ—Ç–∫–ª—é—á–µ–Ω–∞ ‚Äî —É–¥–∞–ª–∏—Ç—å –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ.
    func pruneExpiredReminderImmediatelyIfNeeded(now: Date = Date()) {
        guard let reminder = currentReminder, let reminderDate = reminder.date else { return }
        guard now >= reminderDate, reminder.liveActivityEnabled == false else { return }
        print("üóëÔ∏è Pruning expired reminder immediately due to notification (no LA)")
        deleteReminder()
    }

    // MARK: - Notification Scheduling

    private func scheduleNotification(for reminder: ClockReminder) async {
        let content = UNMutableNotificationContent()
        content.title = "THE M.O.W TIME"
        content.body = "Check the world time \(reminder.formattedTime)"

        #if os(iOS)
        if reminder.isTimeSensitive {
            // Time-Sensitive alert —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –≥—Ä–æ–º–∫–æ—Å—Ç—å—é
            content.sound = UNNotificationSound.defaultCriticalSound(withAudioVolume: 1.0)
            content.interruptionLevel = .timeSensitive
        } else {
            content.sound = .default
        }
        #else
        content.sound = .default
        #endif

        content.categoryIdentifier = "CLOCK_REMINDER"

        let trigger: UNNotificationTrigger

        if let targetDate = reminder.date {
            // –û–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É
            let calendar = Calendar.current
            var dateComponents = calendar.dateComponents([.year, .month, .day], from: targetDate)
            dateComponents.hour = reminder.hour
            dateComponents.minute = reminder.minute

            trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents, repeats: false)
        } else {
            // –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–µ—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            var dateComponents = DateComponents()
            dateComponents.hour = reminder.hour
            dateComponents.minute = reminder.minute

            trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents, repeats: true)
        }

        let request = UNNotificationRequest(
            identifier: notificationIdentifier,
            content: content,
            trigger: trigger
        )

        do {
            try await UNUserNotificationCenter.current().add(request)
        } catch {
        }
    }

    /// –û–±–Ω–æ–≤–ª—è–µ—Ç —Ñ–ª–∞–≥ Live Activity
    func updateLiveActivityEnabled(isEnabled: Bool) async {
        guard var reminder = currentReminder else { return }
        // –ó–∞–ø—Ä–µ—â–∞–µ–º –≤–∫–ª—é—á–∞—Ç—å Live Activity —É –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        if reminder.isDaily && isEnabled {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø–æ–ø—ã—Ç–∫—É –≤–∫–ª—é—á–∏—Ç—å LA –¥–ª—è daily
            return
        }
        // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ 24 —á–∞—Å–∞: –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ–º –≤–∫–ª—é—á–∏—Ç—å LA –µ—Å–ª–∏ –¥–∞—Ç–∞ —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–∞
        if isEnabled, let d = reminder.date, d.timeIntervalSince(Date()) > 24*60*60 {
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤—ã–∫–ª—é—á–∞–µ–º
            reminder.liveActivityEnabled = false
            await setReminder(reminder)
            return
        }
        guard reminder.liveActivityEnabled != isEnabled else { return }
        reminder.liveActivityEnabled = isEnabled
#if canImport(ActivityKit) && !os(macOS)
        if #available(iOS 16.1, *) {
            if isEnabled == false {
                await endLiveActivity(reminderID: reminder.id)
            }
        }
#endif
        await setReminder(reminder)
    }

    /// –û–±–Ω–æ–≤–ª—è–µ—Ç —Ñ–ª–∞–≥ Time-Sensitive Alert
    func updateTimeSensitiveEnabled(isEnabled: Bool) async {
        guard var reminder = currentReminder else { return }
        guard reminder.isTimeSensitive != isEnabled else { return }
        reminder.isTimeSensitive = isEnabled
        await setReminder(reminder)
    }

    // Always Live Activity removed

    // MARK: - Preview toggles (for temporary reminder before confirmation)
    func setPreviewLiveActivityEnabled(_ isEnabled: Bool) {
        previewLiveActivityEnabled = isEnabled
        persistPreviewPreferences()
    }

    // Always Live Activity removed

    func setPreviewTimeSensitiveEnabled(_ isEnabled: Bool) {
        previewTimeSensitiveEnabled = isEnabled
        persistPreviewPreferences()
    }

    private func persistPreviewPreferences() {
        let stub = ClockReminder(
            hour: 0,
            minute: 0,
            date: nil,
            isEnabled: false,
            liveActivityEnabled: previewLiveActivityEnabled,
            alwaysLiveActivity: false,
            isTimeSensitive: previewTimeSensitiveEnabled,
            preserveExactMinute: true
        )
        saveLiveActivityPreferences(from: stub)
    }

    // Expose preview preferences for UI defaults
    var lastPreviewLiveActivityEnabled: Bool { previewLiveActivityEnabled }
    var lastPreviewTimeSensitiveEnabled: Bool { previewTimeSensitiveEnabled }

    // MARK: - City selection API

    /// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –≥–æ—Ä–æ–¥ –Ω–∞ –ø–ª–∏—Ç–∫–µ ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º Live Activity.
    func selectCity(name: String, identifier: String) async {
        // –í—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞ —Ä–∞–∑—Ä–µ—à—ë–Ω —Ç–æ–ª—å–∫–æ –¥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (–≤ —Ä–µ–∂–∏–º–µ –ø—Ä–µ–≤—å—é)
        guard isCityTapEnabled else { return }
        selectedCityIdentifier = identifier
        selectedCityName = name
        reevaluateCityTapEnabled()
#if canImport(ActivityKit) && !os(macOS)
        if #available(iOS 16.1, *) {
            // –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞ –≤—ã–±–∏—Ä–∞—Ç—å –Ω–µ–ª—å–∑—è, –ø–æ—ç—Ç–æ–º—É currentReminder –∑–¥–µ—Å—å –≤—Å–µ–≥–¥–∞ nil
        }
#endif
    }

    /// –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≥–æ—Ä–æ–¥ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç Live Activity.
    func clearSelectedCity() {
        selectedCityIdentifier = nil
        selectedCityName = nil
        reevaluateCityTapEnabled()
    }

    private func reevaluateCityTapEnabled() {
        #if os(iOS)
        if #available(iOS 16.1, *) {
            // –¢–∞–ø –ø–æ –≥–æ—Ä–æ–¥–∞–º –≤–∫–ª—é—á—ë–Ω —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ –ø—Ä–µ–≤—å—é (–¥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è)
            isCityTapEnabled = (currentReminder == nil) && (temporaryHour != nil) && (temporaryMinute != nil)
        } else {
            isCityTapEnabled = false
        }
        #else
        isCityTapEnabled = false
        #endif
    }

    private func updateLiveActivityIntegration(for reminder: ClockReminder) async {
#if canImport(ActivityKit) && !os(macOS)
        if #available(iOS 16.1, *) {
            await updateLiveActivity(for: reminder)
            await purgeExtraneousActivities(keeping: reminder.id)
        }
#endif
    }

#if canImport(ActivityKit) && !os(macOS)
    @available(iOS 16.1, *)
    private func reconcileLiveActivityOnLaunch() {
        Task { [weak self] in
            guard let self else { return }
            if let reminder = self.currentReminder {
                await self.updateLiveActivity(for: reminder)
                await self.purgeExtraneousActivities(keeping: reminder.id)
            } else {
                // –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ‚Äî –∑–∞–≤–µ—Ä—à–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                await self.terminateOrphanedActivities()
            }
        }
    }

    @available(iOS 16.1, *)
    private func startLiveActivityUpdateTimer() {
        // –û–±–Ω–æ–≤–ª—è–µ–º Live Activity –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
        updateTimer = Timer.scheduledTimer(withTimeInterval: 10, repeats: true) { [weak self] _ in
            Task { @MainActor [weak self] in
                guard let self else { return }
                self.reevaluateCityTapEnabled()
                if let reminder = self.currentReminder {
                    await self.updateLiveActivity(for: reminder)
                }
                self.cleanupExpiredReminderIfNeeded()
            }
        }
    }

    @available(iOS 16.1, *)
    private func terminateOrphanedActivities() async {
        let activities = Activity<ReminderLiveActivityAttributes>.activities
        for activity in activities {
            if #available(iOS 16.2, *) {
                let content = ActivityContent(state: activity.content.state, staleDate: nil)
                await activity.end(content, dismissalPolicy: .immediate)
            } else {
                await activity.end(dismissalPolicy: .immediate)
            }
        }
        clearSelectedCity()
        reevaluateCityTapEnabled()
    }

    @available(iOS 16.1, *)
    private func purgeExtraneousActivities(keeping reminderID: UUID) async {
        let activities = Activity<ReminderLiveActivityAttributes>.activities
        for activity in activities where activity.attributes.reminderID != reminderID {
            if #available(iOS 16.2, *) {
                let content = ActivityContent(state: activity.content.state, staleDate: nil)
                await activity.end(content, dismissalPolicy: .immediate)
            } else {
                await activity.end(dismissalPolicy: .immediate)
            }
        }
        reevaluateCityTapEnabled()
    }

    @available(iOS 16.1, *)
    private func updateLiveActivity(for reminder: ClockReminder) async {
        // Live Activity –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¢–û–õ–¨–ö–û –¥–ª—è –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        guard reminder.date != nil else {
            print("‚è∏Ô∏è Live Activity is only for one-time reminders")
            await endLiveActivity(reminderID: reminder.id)
            clearSelectedCity()
            reevaluateCityTapEnabled()
            return
        }

        guard reminder.liveActivityEnabled, reminder.isEnabled else {
            print("‚è∏Ô∏è Live Activity disabled or reminder disabled")
            await endLiveActivity(reminderID: reminder.id)
            clearSelectedCity()
            reevaluateCityTapEnabled()
            return
        }

        if #available(iOS 16.2, *) {
            guard ActivityAuthorizationInfo().areActivitiesEnabled else {
                print("‚è∏Ô∏è Live Activities not authorized")
                return
            }
        }

        let scheduledDate = reminder.nextScheduledDate()
        let now = Date()

        let hasTriggered = scheduledDate <= now

        print("üîÑ updateLiveActivity (one-time): scheduledDate=\(scheduledDate), now=\(now), hasTriggered=\(hasTriggered)")

        let contentState = ReminderLiveActivityAttributes.ContentState(
            endDate: scheduledDate,
            hasFinished: hasTriggered,
            selectedCityName: selectedCityName
        )

        if let existing = Activity<ReminderLiveActivityAttributes>.activities.first(where: { $0.attributes.reminderID == reminder.id }) {
            print("üìù Updating existing Live Activity with hasTriggered=\(hasTriggered)")
            if #available(iOS 16.2, *) {
                let content = ActivityContent(state: contentState, staleDate: nil)
                await existing.update(content)
                print("‚úÖ Live Activity updated successfully")
            } else {
                await existing.update(using: contentState)
                print("‚úÖ Live Activity updated successfully (iOS 16.1)")
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–ª–∞–≥ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ç–∞–ø–æ–≤
            reevaluateCityTapEnabled()

            if hasTriggered {
                // –ù–µ –∑–∞–≤–µ—Ä—à–∞–µ–º LA: UI —Å–∞–º –ø–æ–∫–∞–∂–µ—Ç "–ø–æ—Å–ª–µ" –ø–æ –≤—Ä–µ–º–µ–Ω–∏.
                // –î–∞–¥–∏–º —Å–∏—Å—Ç–µ–º–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º reminder.
                clearSelectedCity()
                reevaluateCityTapEnabled()
                do { try await Task.sleep(nanoseconds: 500_000_000) } catch {}
                print("üóëÔ∏è Deleting reminder after LA update (no end)")
                self.deleteReminder(endLiveActivity: false)
            }
        } else {
            // –ù–µ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é Live Activity –µ—Å–ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–∂–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ
            guard !hasTriggered else {
                print("‚ùå Not creating Live Activity - already triggered")
                clearSelectedCity()
                reevaluateCityTapEnabled()
                return
            }

            print("üÜï Creating NEW Live Activity for reminder (one-time)")
            let attributes = ReminderLiveActivityAttributes(reminderID: reminder.id, title: "‚äï THE M.O.W TIME ‚äó")
            if #available(iOS 16.2, *) {
                let content = ActivityContent(state: contentState, staleDate: nil)
                let result = try? Activity<ReminderLiveActivityAttributes>.request(
                    attributes: attributes,
                    content: content,
                    pushType: nil
                )
                if result != nil {
                    print("‚úÖ Live Activity created successfully")
                } else {
                    print("‚ùå Failed to create Live Activity")
                }
            } else {
                let result = try? Activity<ReminderLiveActivityAttributes>.request(
                    attributes: attributes,
                    contentState: contentState,
                    pushType: nil
                )
                if result != nil {
                    print("‚úÖ Live Activity created successfully (iOS 16.1)")
                } else {
                    print("‚ùå Failed to create Live Activity (iOS 16.1)")
                }
            }
            // –£–±–∏—Ä–∞–µ–º –ª—é–±—ã–µ –ø–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ ‚Äî –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞
            await purgeExtraneousActivities(keeping: reminder.id)
            // –ù–æ–≤—ã–π LA —Å–æ–∑–¥–∞–Ω ‚Äî —Ä–∞–∑—Ä–µ—à–∞–µ–º —Ç–∞–ø –ø–æ –≥–æ—Ä–æ–¥–∞–º
            reevaluateCityTapEnabled()
        }
    }

    @available(iOS 16.1, *)
    private func endLiveActivity(reminderID: UUID) async {
        guard let activity = Activity<ReminderLiveActivityAttributes>.activities.first(where: { $0.attributes.reminderID == reminderID }) else {
            return
        }
        if #available(iOS 16.2, *) {
            let content = ActivityContent(state: activity.content.state, staleDate: nil)
            await activity.end(content, dismissalPolicy: .immediate)
        } else {
            await activity.end(dismissalPolicy: .immediate)
        }
        clearSelectedCity()
        reevaluateCityTapEnabled()
    }

    // –ü—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Live Activity (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ AppDelegate –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏)
    @available(iOS 16.1, *)
    func forceUpdateLiveActivity(for reminder: ClockReminder) async {
        print("üí• Force updating Live Activity")
        await updateLiveActivity(for: reminder)
    }
#endif
}
