//
//  CitySelectionIntent.swift
//  ClockW3
//
//  Widget configuration for city selection
//

import AppIntents
import Foundation

// MARK: - City Entity –¥–ª—è AppIntents
struct CityEntity: AppEntity {
    let id: String
    let displayName: String

    static var typeDisplayRepresentation: TypeDisplayRepresentation {
        TypeDisplayRepresentation(name: "City")
    }

    var displayRepresentation: DisplayRepresentation {
        DisplayRepresentation(title: "\(displayName)")
    }

    static var defaultQuery = CityQuery()
}

// MARK: - City Query
struct CityQuery: EntityQuery {
    func entities(for identifiers: [String]) async throws -> [CityEntity] {
        // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –≥–æ—Ä–æ–¥–∞ –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∑–∞–ø—Ä–æ—Å–µ
        let cities = await loadSavedCitiesAsync()
        return cities.filter { identifiers.contains($0.id) }
    }

    func suggestedEntities() async throws -> [CityEntity] {
        // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –≥–æ—Ä–æ–¥–∞ –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∑–∞–ø—Ä–æ—Å–µ - –ë–ï–ó –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
        return await loadSavedCitiesAsync()
    }

    func defaultResult() async -> CityEntity? {
        let cities = await loadSavedCitiesAsync()
        return cities.first
    }

    private func loadSavedCitiesAsync() async -> [CityEntity] {
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è UserDefaults –ø–µ—Ä–µ–¥ —á—Ç–µ–Ω–∏–µ–º
        SharedUserDefaults.shared.synchronize()

        // –ß–∏—Ç–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ –∏–∑ SharedUserDefaults (—Ñ–æ—Ä–º–∞—Ç: —Å—Ç—Ä–æ–∫–∞ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º –∑–∞–ø—è—Ç–æ–π)
        let idsString = SharedUserDefaults.shared.string(forKey: SharedUserDefaults.selectedCitiesKey) ?? ""
        print("üîç CityQuery: idsString = '\(idsString)'")

        var identifiers = idsString.split(separator: ",").map(String.init)
        print("üîç CityQuery: identifiers count = \(identifiers.count), list = \(identifiers)")

        // –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ
        if identifiers.isEmpty {
            identifiers = WorldCity.initialSelectionIdentifiers()
            print("üîç CityQuery: Using default identifiers, count = \(identifiers.count)")
        }

        let entities = identifiers.map { identifier in
            let name = TimeZoneDirectory.cityName(forIdentifier: identifier)
            return CityEntity(id: identifier, displayName: name)
        }
        print("üîç CityQuery: Returning \(entities.count) cities")

        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã —Å–∏—Å—Ç–µ–º–∞ –ø–æ–Ω—è–ª–∞ —á—Ç–æ —ç—Ç–æ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å
        try? await Task.sleep(nanoseconds: 10_000_000) // 0.01 —Å–µ–∫—É–Ω–¥—ã

        return entities
    }
}

// MARK: - Widget Configuration Intents
struct MediumWidgetConfigurationIntent: WidgetConfigurationIntent {
    static var title: LocalizedStringResource = "Select City"
    static var description = IntentDescription("Choose which city to display")

    @Parameter(title: "City", default: nil)
    var city: CityEntity?
}

struct SmallWidgetConfigurationIntent: WidgetConfigurationIntent {
    static var title: LocalizedStringResource = "Select City"
    static var description = IntentDescription("Choose which city to display")

    @Parameter(title: "City", default: nil)
    var city: CityEntity?
}

struct LargeWidgetConfigurationIntent: WidgetConfigurationIntent {
    static var title: LocalizedStringResource = "Select City"
    static var description = IntentDescription("Choose which city to display")

    @Parameter(title: "City", default: nil)
    var city: CityEntity?
}
