#!/usr/bin/env swift
import Foundation

// –¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
struct PerformanceTests {
    
    static func runTests() -> Bool {
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
        
        var passed = 0
        var total = 0
        
        // –¢–µ—Å—Ç 1: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–∞—Å—á—ë—Ç–∞ —É–≥–ª–æ–≤
        total += 1
        let startTime1 = CFAbsoluteTimeGetCurrent()
        for hour in 0..<24 {
            for minute in 0..<60 {
                _ = calculateArrowAngle(hour: hour, minute: minute)
            }
        }
        let duration1 = CFAbsoluteTimeGetCurrent() - startTime1
        if duration1 < 0.1 { // –î–æ–ª–∂–Ω–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –º–µ–Ω–µ–µ —á–µ–º –∑–∞ 100–º—Å
            passed += 1
            print("‚úÖ –¢–µ—Å—Ç 1: –†–∞—Å—á—ë—Ç —É–≥–ª–æ–≤ –∑–∞ \(String(format: "%.3f", duration1))—Å")
        } else {
            print("‚ùå –¢–µ—Å—Ç 1: –†–∞—Å—á—ë—Ç —É–≥–ª–æ–≤ —Å–ª–∏—à–∫–æ–º –º–µ–¥–ª–µ–Ω–Ω—ã–π: \(String(format: "%.3f", duration1))—Å")
        }
        
        // –¢–µ—Å—Ç 2: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —É–≥–ª–æ–≤
        total += 1
        let startTime2 = CFAbsoluteTimeGetCurrent()
        for _ in 0..<10000 {
            _ = normalizeAngle(Double.random(in: -10*Double.pi...10*Double.pi))
        }
        let duration2 = CFAbsoluteTimeGetCurrent() - startTime2
        if duration2 < 0.05 { // –î–æ–ª–∂–Ω–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –º–µ–Ω–µ–µ —á–µ–º –∑–∞ 50–º—Å
            passed += 1
            print("‚úÖ –¢–µ—Å—Ç 2: –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —É–≥–ª–æ–≤ –∑–∞ \(String(format: "%.3f", duration2))—Å")
        } else {
            print("‚ùå –¢–µ—Å—Ç 2: –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —É–≥–ª–æ–≤ —Å–ª–∏—à–∫–æ–º –º–µ–¥–ª–µ–Ω–Ω–∞—è: \(String(format: "%.3f", duration2))—Å")
        }
        
        // –¢–µ—Å—Ç 3: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞—Ç
        total += 1
        let startTime3 = CFAbsoluteTimeGetCurrent()
        for _ in 0..<1000 {
            _ = Date()
        }
        let duration3 = CFAbsoluteTimeGetCurrent() - startTime3
        if duration3 < 0.01 { // –î–æ–ª–∂–Ω–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –º–µ–Ω–µ–µ —á–µ–º –∑–∞ 10–º—Å
            passed += 1
            print("‚úÖ –¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞—Ç –∑–∞ \(String(format: "%.3f", duration3))—Å")
        } else {
            print("‚ùå –¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞—Ç —Å–ª–∏—à–∫–æ–º –º–µ–¥–ª–µ–Ω–Ω–æ–µ: \(String(format: "%.3f", duration3))—Å")
        }
        
        print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: \(passed)/\(total) —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
        return passed == total
    }
    
    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    private static func calculateArrowAngle(hour: Int, minute: Int) -> Double {
        let hour24 = Double(hour) + Double(minute) / 60.0
        let degrees = hour24 * 15.0 - 18.0 * 15.0
        return degrees * Double.pi / 180.0
    }
    
    private static func normalizeAngle(_ angle: Double) -> Double {
        let twoPi = 2 * Double.pi
        var result = angle.truncatingRemainder(dividingBy: twoPi)
        if result > Double.pi {
            result -= twoPi
        } else if result <= -Double.pi {
            result += twoPi
        }
        return result
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
let success = PerformanceTests.runTests()
exit(success ? 0 : 1)
