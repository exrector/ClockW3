#!/usr/bin/env swift
import Foundation

// –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
struct IntegrationTests {
    
    static func runTests() -> Bool {
        print("üß™ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã...")
        
        var passed = 0
        var total = 0
        
        // –¢–µ—Å—Ç 1: –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ä–∞—Å—á—ë—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
        total += 1
        let success1 = testFullTimeCalculationCycle()
        if success1 {
            passed += 1
            print("‚úÖ –¢–µ—Å—Ç 1: –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ä–∞—Å—á—ë—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏")
        } else {
            print("‚ùå –¢–µ—Å—Ç 1: –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ —Ä–∞—Å—á—ë—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏")
        }
        
        // –¢–µ—Å—Ç 2: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        total += 1
        let success2 = testSystemIntegration()
        if success2 {
            passed += 1
            print("‚úÖ –¢–µ—Å—Ç 2: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–æ–π")
        } else {
            print("‚ùå –¢–µ—Å—Ç 2: –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Å–∏—Å—Ç–µ–º–æ–π")
        }
        
        // –¢–µ—Å—Ç 3: –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
        total += 1
        let success3 = testEdgeCases()
        if success3 {
            passed += 1
            print("‚úÖ –¢–µ—Å—Ç 3: –ì—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏")
        } else {
            print("‚ùå –¢–µ—Å—Ç 3: –û—à–∏–±–∫–∞ –≤ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö")
        }
        
        print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: \(passed)/\(total) —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
        return passed == total
    }
    
    private static func testFullTimeCalculationCycle() -> Bool {
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª: –≤—Ä–µ–º—è -> —É–≥–æ–ª -> –≤—Ä–µ–º—è
        let originalTime = Date()
        let calendar = Calendar.current
        let hour = calendar.component(.hour, from: originalTime)
        let minute = calendar.component(.minute, from: originalTime)
        
        // –í—Ä–µ–º—è -> —É–≥–æ–ª
        let angle = calculateArrowAngle(hour: hour, minute: minute)
        
        // –£–≥–æ–ª -> –≤—Ä–µ–º—è (–æ–±—Ä–∞—Ç–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ)
        let degrees = angle * 180.0 / Double.pi
        let normalizedDegrees = degrees < 0 ? degrees + 360 : degrees
        let calculatedHours = (normalizedDegrees + 270) / 15.0
        let calculatedHour = Int(calculatedHours.truncatingRemainder(dividingBy: 24))
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ—Å—Ç—å (–¥–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å –≤ 1 —á–∞—Å)
        return abs(calculatedHour - hour) <= 1
    }
    
    private static func testSystemIntegration() -> Bool {
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
        let currentTimeZone = TimeZone.current
        let utcTimeZone = TimeZone(identifier: "UTC")
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤
        guard utcTimeZone != nil else { return false }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É —Å –∫–∞–ª–µ–Ω–¥–∞—Ä—ë–º
        let calendar = Calendar.current
        let now = Date()
        let components = calendar.dateComponents([.year, .month, .day, .hour, .minute], from: now)
        
        return components.year != nil && components.hour != nil
    }
    
    private static func testEdgeCases() -> Bool {
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏
        var allPassed = true
        
        // –ü–æ–ª–Ω–æ—á—å
        let midnight = calculateArrowAngle(hour: 0, minute: 0)
        if abs(midnight - (-3 * Double.pi / 2)) > 0.001 {
            allPassed = false
        }
        
        // 23:59
        let almostMidnight = calculateArrowAngle(hour: 23, minute: 59)
        let expectedAlmostMidnight = ((23 + 59.0/60.0) * 15.0 - 270.0) * Double.pi / 180.0
        if abs(almostMidnight - expectedAlmostMidnight) > 0.1 {
            allPassed = false
        }
        
        // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –±–æ–ª—å—à–∏—Ö —É–≥–ª–æ–≤
        let largeAngle = 10 * Double.pi
        let normalized = normalizeAngle(largeAngle)
        if abs(normalized) > Double.pi {
            allPassed = false
        }
        
        return allPassed
    }
    
    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    private static func calculateArrowAngle(hour: Int, minute: Int) -> Double {
        let hour24 = Double(hour) + Double(minute) / 60.0
        let degrees = hour24 * 15.0 - 18.0 * 15.0
        return degrees * Double.pi / 180.0
    }
    
    private static func normalizeAngle(_ angle: Double) -> Double {
        let twoPi = 2 * Double.pi
        var result = angle.truncatingRemainder(dividingBy: twoPi)
        if result > Double.pi {
            result -= twoPi
        } else if result <= -Double.pi {
            result += twoPi
        }
        return result
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
let success = IntegrationTests.runTests()
exit(success ? 0 : 1)
