#!/usr/bin/env swift
import Foundation

// –¢–µ—Å—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞–º–∏
struct WorldCityTests {
    
    static func runTests() -> Bool {
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞–º–∏...")
        
        var passed = 0
        var total = 0
        
        // –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ —Å –≤–∞–ª–∏–¥–Ω—ã–º —á–∞—Å–æ–≤—ã–º –ø–æ—è—Å–æ–º
        total += 1
        let validCity = MockWorldCity(name: "Test", timeZoneIdentifier: "UTC", iataCode: "TST")
        if validCity.name == "Test" && validCity.iataCode == "TST" {
            passed += 1
            print("‚úÖ –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ –≤–∞–ª–∏–¥–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞")
        } else {
            print("‚ùå –¢–µ—Å—Ç 1: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞")
        }
        
        // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
        total += 1
        if TimeZone(identifier: "UTC") != nil {
            passed += 1
            print("‚úÖ –¢–µ—Å—Ç 2: UTC —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –≤–∞–ª–∏–¥–µ–Ω")
        } else {
            print("‚ùå –¢–µ—Å—Ç 2: UTC —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        }
        
        // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
        total += 1
        let localTZ = TimeZone.current.identifier
        if !localTZ.isEmpty {
            passed += 1
            print("‚úÖ –¢–µ—Å—Ç 3: –õ–æ–∫–∞–ª—å–Ω—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: \(localTZ)")
        } else {
            print("‚ùå –¢–µ—Å—Ç 3: –õ–æ–∫–∞–ª—å–Ω—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω")
        }
        
        // –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        total += 1
        let defaultIdentifiers = getInitialSelectionIdentifiers()
        if !defaultIdentifiers.isEmpty && defaultIdentifiers.contains(TimeZone.current.identifier) {
            passed += 1
            print("‚úÖ –¢–µ—Å—Ç 4: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π –ø–æ—è—Å")
        } else {
            print("‚ùå –¢–µ—Å—Ç 4: –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        }
        
        print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: \(passed)/\(total) —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
        return passed == total
    }
    
    // Mock —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    private struct MockWorldCity {
        let name: String
        let timeZoneIdentifier: String
        let iataCode: String
    }
    
    private static func getInitialSelectionIdentifiers() -> [String] {
        return [
            TimeZone.current.identifier,
            "UTC",
            "America/New_York",
            "Europe/London",
            "Asia/Tokyo"
        ]
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
let success = WorldCityTests.runTests()
exit(success ? 0 : 1)
