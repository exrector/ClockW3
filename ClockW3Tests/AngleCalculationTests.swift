#!/usr/bin/env swift
import Foundation

// –¢–µ—Å—Ç—ã —Ä–∞—Å—á—ë—Ç–∞ —É–≥–ª–æ–≤ –¥–ª—è ClockW3
struct AngleCalculationTests {
    
    static func runTests() -> Bool {
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—á—ë—Ç–∞ —É–≥–ª–æ–≤...")
        
        var passed = 0
        var total = 0
        
        // –¢–µ—Å—Ç 1: 18:00 = 0¬∞ (–æ–ø–æ—Ä–Ω–∞—è —Ç–æ—á–∫–∞)
        total += 1
        let angle18 = calculateArrowAngle(hour: 18, minute: 0)
        if abs(angle18 - 0) < 0.001 {
            passed += 1
            print("‚úÖ –¢–µ—Å—Ç 1: 18:00 = 0¬∞")
        } else {
            print("‚ùå –¢–µ—Å—Ç 1: 18:00 ‚â† 0¬∞ (–ø–æ–ª—É—á–µ–Ω–æ: \(angle18))")
        }
        
        // –¢–µ—Å—Ç 2: 00:00 = -270¬∞ = -3œÄ/2
        total += 1
        let angle00 = calculateArrowAngle(hour: 0, minute: 0)
        let expected00 = -3 * Double.pi / 2
        if abs(angle00 - expected00) < 0.001 {
            passed += 1
            print("‚úÖ –¢–µ—Å—Ç 2: 00:00 = -3œÄ/2")
        } else {
            print("‚ùå –¢–µ—Å—Ç 2: 00:00 ‚â† -3œÄ/2 (–ø–æ–ª—É—á–µ–Ω–æ: \(angle00))")
        }
        
        // –¢–µ—Å—Ç 3: 12:00 = -90¬∞ = -œÄ/2
        total += 1
        let angle12 = calculateArrowAngle(hour: 12, minute: 0)
        let expected12 = -Double.pi / 2
        if abs(angle12 - expected12) < 0.001 {
            passed += 1
            print("‚úÖ –¢–µ—Å—Ç 3: 12:00 = -œÄ/2")
        } else {
            print("‚ùå –¢–µ—Å—Ç 3: 12:00 ‚â† -œÄ/2 (–ø–æ–ª—É—á–µ–Ω–æ: \(angle12))")
        }
        
        // –¢–µ—Å—Ç 4: 06:00 = -180¬∞ = -œÄ
        total += 1
        let angle06 = calculateArrowAngle(hour: 6, minute: 0)
        let expected06 = -Double.pi
        if abs(angle06 - expected06) < 0.001 {
            passed += 1
            print("‚úÖ –¢–µ—Å—Ç 4: 06:00 = -œÄ")
        } else {
            print("‚ùå –¢–µ—Å—Ç 4: 06:00 ‚â† -œÄ (–ø–æ–ª—É—á–µ–Ω–æ: \(angle06))")
        }
        
        print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: \(passed)/\(total) —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
        return passed == total
    }
    
    // –õ–æ–∫–∞–ª—å–Ω–∞—è –∫–æ–ø–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    private static func calculateArrowAngle(hour: Int, minute: Int) -> Double {
        let hour24 = Double(hour) + Double(minute) / 60.0
        let normalized = hour24 < 24 ? hour24 : hour24.truncatingRemainder(dividingBy: 24)
        let degrees = normalized * 15.0 - 18.0 * 15.0
        return degrees * Double.pi / 180.0
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
let success = AngleCalculationTests.runTests()
exit(success ? 0 : 1)
