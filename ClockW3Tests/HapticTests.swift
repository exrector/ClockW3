#!/usr/bin/env swift
import Foundation

// –¢–µ—Å—Ç—ã —Ö–∞–ø—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
struct HapticTests {
    
    static func runTests() -> Bool {
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ö–∞–ø—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏...")
        
        var passed = 0
        var total = 0
        
        // –¢–µ—Å—Ç 1: –†–∞—Å—á—ë—Ç –∏–Ω–¥–µ–∫—Å–∞ —Ä–∏—Å–∫–∏
        total += 1
        let index0 = tickIndex(for: 0)
        if index0 == 0 {
            passed += 1
            print("‚úÖ –¢–µ—Å—Ç 1: –ò–Ω–¥–µ–∫—Å –¥–ª—è 0¬∞ = 0")
        } else {
            print("‚ùå –¢–µ—Å—Ç 1: –ò–Ω–¥–µ–∫—Å –¥–ª—è 0¬∞ ‚â† 0 (–ø–æ–ª—É—á–µ–Ω–æ: \(index0))")
        }
        
        // –¢–µ—Å—Ç 2: –ò–Ω–¥–µ–∫—Å –¥–ª—è 90¬∞
        total += 1
        let index90 = tickIndex(for: Double.pi / 2)
        let expected90 = 24 // —á–µ—Ç–≤–µ—Ä—Ç—å –æ–±–æ—Ä–æ—Ç–∞
        if index90 == expected90 {
            passed += 1
            print("‚úÖ –¢–µ—Å—Ç 2: –ò–Ω–¥–µ–∫—Å –¥–ª—è 90¬∞ = 24")
        } else {
            print("‚ùå –¢–µ—Å—Ç 2: –ò–Ω–¥–µ–∫—Å –¥–ª—è 90¬∞ ‚â† 24 (–ø–æ–ª—É—á–µ–Ω–æ: \(index90))")
        }
        
        // –¢–µ—Å—Ç 3: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ä–∏—Å–∫–∏ - —á–∞—Å–æ–≤–∞—è
        total += 1
        let hourType = tickType(for: 0)
        if hourType == .hour {
            passed += 1
            print("‚úÖ –¢–µ—Å—Ç 3: –¢–∏–ø —Ä–∏—Å–∫–∏ 0 = —á–∞—Å")
        } else {
            print("‚ùå –¢–µ—Å—Ç 3: –¢–∏–ø —Ä–∏—Å–∫–∏ 0 ‚â† —á–∞—Å")
        }
        
        // –¢–µ—Å—Ç 4: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ä–∏—Å–∫–∏ - –ø–æ–ª—É—á–∞—Å–æ–≤–∞—è
        total += 1
        let halfHourType = tickType(for: 8)
        if halfHourType == .halfHour {
            passed += 1
            print("‚úÖ –¢–µ—Å—Ç 4: –¢–∏–ø —Ä–∏—Å–∫–∏ 8 = –ø–æ–ª—á–∞—Å–∞")
        } else {
            print("‚ùå –¢–µ—Å—Ç 4: –¢–∏–ø —Ä–∏—Å–∫–∏ 8 ‚â† –ø–æ–ª—á–∞—Å–∞")
        }
        
        // –¢–µ—Å—Ç 5: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ä–∏—Å–∫–∏ - —á–µ—Ç–≤–µ—Ä—Ç—å—á–∞—Å–æ–≤–∞—è
        total += 1
        let quarterType = tickType(for: 4)
        if quarterType == .quarter {
            passed += 1
            print("‚úÖ –¢–µ—Å—Ç 5: –¢–∏–ø —Ä–∏—Å–∫–∏ 4 = —á–µ—Ç–≤–µ—Ä—Ç—å")
        } else {
            print("‚ùå –¢–µ—Å—Ç 5: –¢–∏–ø —Ä–∏—Å–∫–∏ 4 ‚â† —á–µ—Ç–≤–µ—Ä—Ç—å")
        }
        
        print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: \(passed)/\(total) —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
        return passed == total
    }
    
    // –¢–∏–ø—ã —Ä–∏—Å–æ–∫
    private enum TickType {
        case hour, halfHour, quarter, regular
    }
    
    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    private static func tickIndex(for angle: Double) -> Int {
        let ticksPerRevolution = 96
        let normalizedAngle = angle < 0 ? angle + 2 * Double.pi : angle
        let tickAngle = 2 * Double.pi / Double(ticksPerRevolution)
        return Int(round(normalizedAngle / tickAngle)) % ticksPerRevolution
    }
    
    private static func tickType(for index: Int) -> TickType {
        if index % 16 == 0 { return .hour }
        if index % 8 == 0 { return .halfHour }
        if index % 4 == 0 { return .quarter }
        return .regular
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
let success = HapticTests.runTests()
exit(success ? 0 : 1)
