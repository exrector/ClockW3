#!/usr/bin/env swift
import Foundation

// –¢–µ—Å—Ç—ã —Ç–æ—á–Ω–æ—Å—Ç–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º—è ‚Üî —É–≥–æ–ª
struct TimeConversionTests {
    
    static func runTests() -> Bool {
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ—á–Ω–æ—Å—Ç–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º—è ‚Üî —É–≥–æ–ª...")
        
        var passed = 0
        var total = 0
        
        // –¢–µ—Å—Ç 1: –¢–æ—á–Ω–æ—Å—Ç—å –¥–ª—è —Ä–æ–≤–Ω—ã—Ö —á–∞—Å–æ–≤
        total += 1
        let success1 = testExactHours()
        if success1 {
            passed += 1
            print("‚úÖ –¢–µ—Å—Ç 1: –¢–æ—á–Ω–æ—Å—Ç—å –¥–ª—è —Ä–æ–≤–Ω—ã—Ö —á–∞—Å–æ–≤")
        } else {
            print("‚ùå –¢–µ—Å—Ç 1: –û—à–∏–±–∫–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏ –¥–ª—è —Ä–æ–≤–Ω—ã—Ö —á–∞—Å–æ–≤")
        }
        
        // –¢–µ—Å—Ç 2: –¢–æ—á–Ω–æ—Å—Ç—å –¥–ª—è –ø–æ–ª—É—á–∞—Å–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        total += 1
        let success2 = testHalfHours()
        if success2 {
            passed += 1
            print("‚úÖ –¢–µ—Å—Ç 2: –¢–æ—á–Ω–æ—Å—Ç—å –¥–ª—è –ø–æ–ª—É—á–∞—Å–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π")
        } else {
            print("‚ùå –¢–µ—Å—Ç 2: –û—à–∏–±–∫–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–æ–ª—É—á–∞—Å–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π")
        }
        
        // –¢–µ—Å—Ç 3: –¢–æ—á–Ω–æ—Å—Ç—å –¥–ª—è —á–µ—Ç–≤–µ—Ä—Ç—å—á–∞—Å–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        total += 1
        let success3 = testQuarterHours()
        if success3 {
            passed += 1
            print("‚úÖ –¢–µ—Å—Ç 3: –¢–æ—á–Ω–æ—Å—Ç—å –¥–ª—è —á–µ—Ç–≤–µ—Ä—Ç—å—á–∞—Å–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π")
        } else {
            print("‚ùå –¢–µ—Å—Ç 3: –û—à–∏–±–∫–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏ –¥–ª—è —á–µ—Ç–≤–µ—Ä—Ç—å—á–∞—Å–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π")
        }
        
        // –¢–µ—Å—Ç 4: –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
        total += 1
        let success4 = testFullCycle()
        if success4 {
            passed += 1
            print("‚úÖ –¢–µ—Å—Ç 4: –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è")
        } else {
            print("‚ùå –¢–µ—Å—Ç 4: –û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞")
        }
        
        print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: \(passed)/\(total) —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
        return passed == total
    }
    
    private static func testExactHours() -> Bool {
        let testHours = [0, 6, 12, 18]
        
        for hour in testHours {
            let angle = calculateArrowAngle(hour: hour, minute: 0)
            let reminder = createReminderFromAngle(angle, hour: 12, minute: 0) // –ë–∞–∑–æ–≤–æ–µ –≤—Ä–µ–º—è 12:00
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Ä–µ–º—è –æ–∫—Ä—É–≥–ª–∏–ª–æ—Å—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ (–¥–æ–ø—É—Å–∫–∞–µ–º ¬±15 –º–∏–Ω—É—Ç)
            let expectedMinutes = hour * 60
            let actualMinutes = reminder.hour * 60 + reminder.minute
            let diff = abs(actualMinutes - expectedMinutes)
            
            if diff > 15 && diff < (24 * 60 - 15) { // –£—á–∏—Ç—ã–≤–∞–µ–º –ø–µ—Ä–µ—Ö–æ–¥ —á–µ—Ä–µ–∑ –ø–æ–ª–Ω–æ—á—å
                print("  ‚ùå –ß–∞—Å \(hour): –æ–∂–∏–¥–∞–ª–∏ \(hour):00, –ø–æ–ª—É—á–∏–ª–∏ \(reminder.hour):\(String(format: "%02d", reminder.minute))")
                return false
            }
        }
        
        return true
    }
    
    private static func testHalfHours() -> Bool {
        let testTimes = [(6, 30), (12, 30), (18, 30), (0, 30)]
        
        for (hour, minute) in testTimes {
            let angle = calculateArrowAngle(hour: hour, minute: minute)
            let reminder = createReminderFromAngle(angle, hour: 12, minute: 0)
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ—Å—Ç—å (–¥–æ–ø—É—Å–∫–∞–µ–º ¬±15 –º–∏–Ω—É—Ç)
            let expectedMinutes = hour * 60 + minute
            let actualMinutes = reminder.hour * 60 + reminder.minute
            let diff = abs(actualMinutes - expectedMinutes)
            
            if diff > 15 && diff < (24 * 60 - 15) {
                print("  ‚ùå –í—Ä–µ–º—è \(hour):\(minute): –ø–æ–ª—É—á–∏–ª–∏ \(reminder.hour):\(String(format: "%02d", reminder.minute))")
                return false
            }
        }
        
        return true
    }
    
    private static func testQuarterHours() -> Bool {
        let testTimes = [(12, 15), (12, 45), (6, 15), (18, 45)]
        
        for (hour, minute) in testTimes {
            let angle = calculateArrowAngle(hour: hour, minute: minute)
            let reminder = createReminderFromAngle(angle, hour: 12, minute: 0)
            
            // –î–ª—è —á–µ—Ç–≤–µ—Ä—Ç—å—á–∞—Å–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ç–æ—á–Ω–æ–µ –ø–æ–ø–∞–¥–∞–Ω–∏–µ
            let expectedMinutes = hour * 60 + minute
            let actualMinutes = reminder.hour * 60 + reminder.minute
            let diff = abs(actualMinutes - expectedMinutes)
            
            if diff > 0 && diff < (24 * 60) {
                print("  ‚ùå –í—Ä–µ–º—è \(hour):\(minute): –ø–æ–ª—É—á–∏–ª–∏ \(reminder.hour):\(String(format: "%02d", reminder.minute))")
                return false
            }
        }
        
        return true
    }
    
    private static func testFullCycle() -> Bool {
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª: –≤—Ä–µ–º—è ‚Üí —É–≥–æ–ª ‚Üí –≤—Ä–µ–º—è –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–æ—á–µ–∫
        let criticalTimes = [
            (0, 0),   // –ü–æ–ª–Ω–æ—á—å
            (6, 0),   // –£—Ç—Ä–æ
            (12, 0),  // –ü–æ–ª–¥–µ–Ω—å  
            (18, 0),  // –í–µ—á–µ—Ä (–æ–ø–æ—Ä–Ω–∞—è —Ç–æ—á–∫–∞)
            (23, 59)  // –ü–æ—á—Ç–∏ –ø–æ–ª–Ω–æ—á—å
        ]
        
        for (originalHour, originalMinute) in criticalTimes {
            // –í—Ä–µ–º—è ‚Üí —É–≥–æ–ª
            let angle = calculateArrowAngle(hour: originalHour, minute: originalMinute)
            
            // –£–≥–æ–ª ‚Üí –≤—Ä–µ–º—è
            let reminder = createReminderFromAngle(angle, hour: 12, minute: 0)
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ—Å—Ç—å (–¥–ª—è —Ä–æ–≤–Ω—ã—Ö —á–∞—Å–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ç–æ—á–Ω–æ)
            if originalMinute == 0 {
                if reminder.hour != originalHour || reminder.minute != 0 {
                    print("  ‚ùå –¶–∏–∫–ª \(originalHour):00: –ø–æ–ª—É—á–∏–ª–∏ \(reminder.hour):\(String(format: "%02d", reminder.minute))")
                    return false
                }
            }
        }
        
        return true
    }
    
    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    private static func calculateArrowAngle(hour: Int, minute: Int) -> Double {
        let hour24 = Double(hour) + Double(minute) / 60.0
        let degrees = hour24 * 15.0 - 18.0 * 15.0
        return degrees * Double.pi / 180.0
    }
    
    private static func createReminderFromAngle(_ rotationAngle: Double, hour: Int, minute: Int) -> MockReminder {
        // –ò–º–∏—Ç–∏—Ä—É–µ–º –Ω–æ–≤—É—é –ª–æ–≥–∏–∫—É ClockReminder.fromRotationAngle
        // rotationAngle –Ω–∞–ø—Ä—è–º—É—é –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç—Å—è –≤ –≤—Ä–µ–º—è (–±–µ–∑ —É—á—ë—Ç–∞ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏)
        
        var normalizedAngle = rotationAngle.truncatingRemainder(dividingBy: 2.0 * Double.pi)
        if normalizedAngle < 0 {
            normalizedAngle += 2.0 * Double.pi
        }
        
        let degrees = normalizedAngle * 180.0 / Double.pi
        let hourFloat = (degrees / 15.0 + 18.0).truncatingRemainder(dividingBy: 24.0)
        
        // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ –±–ª–∏–∂–∞–π—à–∏—Ö 15 –º–∏–Ω—É—Ç
        let totalMinutes = hourFloat * 60.0
        let roundedMinutes = round(totalMinutes / 15.0) * 15.0
        
        let resultHour = Int(roundedMinutes / 60.0) % 24
        let resultMinute = Int(roundedMinutes.truncatingRemainder(dividingBy: 60.0))
        
        return MockReminder(hour: resultHour, minute: resultMinute)
    }
    
    private struct MockReminder {
        let hour: Int
        let minute: Int
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
let success = TimeConversionTests.runTests()
exit(success ? 0 : 1)
